{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.2.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from '@iobroker/adapter-core';\r\nimport * as mqtt from 'mqtt';\r\n\r\n\r\n// Load your modules here, e.g.:\r\n// import * as fs from 'fs';\r\n\r\nclass Espresence extends utils.Adapter {\r\n/*\r\n* Brainstorming:\r\n* A mqtt broker is needed for the ESPs to connect to -> setup ioBroker.MQTT-adapter as mqtt-Broker (Server)\r\n* A mqtt client is needed to connect against the broker to receive the messages of the ESPs-> ESPresence adapter must connect against MQTT-Adapter\r\n* */\r\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n        super({\r\n            ...options,\r\n            name: 'espresence',\r\n        });\r\n        this.on('ready', this.onReady.bind(this));\r\n        this.on('stateChange', this.onStateChange.bind(this));\r\n        // this.on('objectChange', this.onObjectChange.bind(this));\r\n        // this.on('message', this.onMessage.bind(this));\r\n        this.on('unload', this.onUnload.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Is called when databases are connected and adapter received configuration.\r\n     */\r\n    private async onReady(): Promise<void> {\r\n        const adapter = this;\r\n        const adapterLog = this.log;\r\n        const adapterConfig = this.config;\r\n        const options = {\r\n            // Clean session\r\n            clean: true,\r\n            connectTimeout: 4000,\r\n            protocolVersion: 3,\r\n            protocolId: 'MQIsdp',\r\n            // Auth\r\n            clientId: 'ESPresence.' + this.instance,\r\n            username: adapterConfig.user,\r\n            password: adapterConfig.password,\r\n        }\r\n        // Initialize your adapter here\r\n        adapterLog.info(`Connecting to MQTT broker [${adapterConfig.mqttBroker}:${adapterConfig.mqttPort}], user:[${adapterConfig.user}], password:[***]`);\r\n        const client = mqtt.connect(`mqtt://${adapterConfig.mqttBroker}:${adapterConfig.mqttPort}`, options);\r\n\r\n        client.on('connect', function (connACK) {\r\n            if (connACK.returnCode===0){\r\n                adapterLog.info(`MQTT connection to broker [${adapterConfig.mqttBroker}:${adapterConfig.mqttPort}] established.`);\r\n                // Subscribes to the status topic to receive updates\r\n                client.subscribe('/#', function (err) {\r\n                    if (!err){\r\n                        adapterLog.info(`Subscribed to all topics.`);\r\n                    } else {\r\n                        adapterLog.info(`Error during subscription: ${JSON.stringify(err)}`);\r\n                    }\r\n                });\r\n            } else {\r\n                adapterLog.info(`Error during connect: ${JSON.stringify(connACK)}`);\r\n            }\r\n        });\r\n\r\n        client.on('message', function (topic, payload) {\r\n            adapterLog.debug(`MQTT topic [${topic}] received message: ${payload.toString()}`);\r\n            adapter.processMsg(adapter, topic, payload);\r\n        });\r\n\r\n        client.on('error', function (error) {\r\n            adapterLog.debug('MQTT server returned error: ' + error);\r\n        });\r\n\r\n        client.on('reconnect', function () {\r\n            adapterLog.info('Reconnecting to mqtt server.');\r\n        });\r\n\r\n        client.on('close', function () {\r\n            adapterLog.info('Disconnected from mqtt server.');\r\n        });\r\n\r\n        client.on('offline', function () {\r\n            adapterLog.info('MQTT offline.');\r\n        });\r\n        /*\r\n        For every state in the system there has to be also an object of type state\r\n        Here a simple template for a boolean variable named 'testVariable'\r\n        Because every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\r\n        */\r\n\r\n        // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\r\n        // You can also add a subscription for multiple states. The following line watches all states starting with 'lights.'\r\n        // this.subscribeStates('lights.*');\r\n        // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\r\n        // this.subscribeStates('*');\r\n\r\n    }\r\n\r\n    isJsonString(str : string): boolean {\r\n        try {\r\n            JSON.parse(str);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isNumber(str : string): boolean {\r\n        return !Number.isNaN( Number.parseFloat(str) );\r\n    }\r\n\r\n    processMsg(adapter : object, topic : string, payload : Buffer){\r\n        let value = payload.toString();\r\n        const objData = {\r\n            type: 'state',\r\n            common: {'name': topic.split('/').pop(),\r\n                'read': true,\r\n                'write': false,\r\n                'role': 'value',\r\n                'type': 'string'\r\n            },\r\n            native: {}\r\n        };\r\n        if ( adapter.isJsonString(value) ) {\r\n            const jPayload = JSON.parse(value);\r\n            objData.type = 'folder';\r\n            objData.role='';\r\n            adapter.processMsg(adapter, topic, objData, jPayload)\r\n        }\r\n        if ( adapter.isNumber(value) ){\r\n            objData.type='number';\r\n            value = Number.parseFloat(value);\r\n        }\r\n\r\n\r\n        adapter.createOrExtendObject(adapter, topic.split('/').join('.'), objData, value)\r\n    }\r\n\r\n    /**\r\n     * Function Create or extend object\r\n     *\r\n     * Updates an existing object (id) or creates it if not existing.\r\n     * In case id and name are equal, it will only set it's new state\r\n     *\r\n     * @param {object} adapter link to the adapters instance\r\n     * @param {string} id path/id of datapoint to create\r\n     * @param {object} objData details to the datapoint to be created (Device, channel, state, ...)\r\n     * @param {any} value value of the datapoint\r\n     */\r\n    createOrExtendObject(adapter, id, objData, value) {\r\n        adapter.getObject(id, function (err, oldObj) {\r\n            if (!err && oldObj) {\r\n                if ( objData.name === oldObj.common.name ){\r\n                    adapter.setState(id, value, true);\r\n                } else{\r\n                    adapter.extendObject(id, objData, () => {adapter.setState(id, value, true);});\r\n                }\r\n            } else {\r\n                adapter.setObjectNotExists(id, objData, () => {adapter.setState(id, value, true);});\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n     */\r\n    private onUnload(callback: () => void): void {\r\n        try {\r\n            // Here you must clear all timeouts or intervals that may still be active\r\n            // clearTimeout(timeout1);\r\n            // clearTimeout(timeout2);\r\n            // ...\r\n            // clearInterval(interval1);\r\n\r\n            callback();\r\n        } catch (e) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\r\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\r\n    // /**\r\n    //  * Is called if a subscribed object changes\r\n    //  */\r\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n    //     if (obj) {\r\n    //         // The object was changed\r\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n    //     } else {\r\n    //         // The object was deleted\r\n    //         this.log.info(`object ${id} deleted`);\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     * Is called if a subscribed state changes\r\n     */\r\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n        if (state) {\r\n            // The state was changed\r\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n        } else {\r\n            // The state was deleted\r\n            this.log.info(`state ${id} deleted`);\r\n        }\r\n    }\r\n\r\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\r\n    // /**\r\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\r\n    //  * Using this method requires 'common.messagebox' property to be set to true in io-package.json\r\n    //  */\r\n    // private onMessage(obj: ioBroker.Message): void {\r\n    //     if (typeof obj === 'object' && obj.message) {\r\n    //         if (obj.command === 'send') {\r\n    //             // e.g. send email or pushover or whatever\r\n    //             this.log.info('send command');\r\n\r\n    //             // Send response in callback if required\r\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n}\r\n\r\nif (require.main !== module) {\r\n    // Export the constructor in compact mode\r\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Espresence(options);\r\n} else {\r\n    // otherwise start the instance directly\r\n    (() => new Espresence())();\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,WAAsB;AAMtB,MAAM,mBAAmB,MAAM,QAAQ;AAAA,EAM5B,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AACnC,UAAM,UAAU;AAChB,UAAM,aAAa,KAAK;AACxB,UAAM,gBAAgB,KAAK;AAC3B,UAAM,UAAU;AAAA,MAEZ,OAAO;AAAA,MACP,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,YAAY;AAAA,MAEZ,UAAU,gBAAgB,KAAK;AAAA,MAC/B,UAAU,cAAc;AAAA,MACxB,UAAU,cAAc;AAAA,IAC5B;AAEA,eAAW,KAAK,8BAA8B,cAAc,cAAc,cAAc,oBAAoB,cAAc,uBAAuB;AACjJ,UAAM,SAAS,KAAK,QAAQ,UAAU,cAAc,cAAc,cAAc,YAAY,OAAO;AAEnG,WAAO,GAAG,WAAW,SAAU,SAAS;AACpC,UAAI,QAAQ,eAAa,GAAE;AACvB,mBAAW,KAAK,8BAA8B,cAAc,cAAc,cAAc,wBAAwB;AAEhH,eAAO,UAAU,MAAM,SAAU,KAAK;AAClC,cAAI,CAAC,KAAI;AACL,uBAAW,KAAK,2BAA2B;AAAA,UAC/C,OAAO;AACH,uBAAW,KAAK,8BAA8B,KAAK,UAAU,GAAG,GAAG;AAAA,UACvE;AAAA,QACJ,CAAC;AAAA,MACL,OAAO;AACH,mBAAW,KAAK,yBAAyB,KAAK,UAAU,OAAO,GAAG;AAAA,MACtE;AAAA,IACJ,CAAC;AAED,WAAO,GAAG,WAAW,SAAU,OAAO,SAAS;AAC3C,iBAAW,MAAM,eAAe,4BAA4B,QAAQ,SAAS,GAAG;AAChF,cAAQ,WAAW,SAAS,OAAO,OAAO;AAAA,IAC9C,CAAC;AAED,WAAO,GAAG,SAAS,SAAU,OAAO;AAChC,iBAAW,MAAM,iCAAiC,KAAK;AAAA,IAC3D,CAAC;AAED,WAAO,GAAG,aAAa,WAAY;AAC/B,iBAAW,KAAK,8BAA8B;AAAA,IAClD,CAAC;AAED,WAAO,GAAG,SAAS,WAAY;AAC3B,iBAAW,KAAK,gCAAgC;AAAA,IACpD,CAAC;AAED,WAAO,GAAG,WAAW,WAAY;AAC7B,iBAAW,KAAK,eAAe;AAAA,IACnC,CAAC;AAAA,EAaL;AAAA,EAEA,aAAa,KAAuB;AAChC,QAAI;AACA,WAAK,MAAM,GAAG;AAAA,IAClB,SAAS,GAAP;AACE,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EAEA,SAAS,KAAuB;AAC5B,WAAO,CAAC,OAAO,MAAO,OAAO,WAAW,GAAG,CAAE;AAAA,EACjD;AAAA,EAEA,WAAW,SAAkB,OAAgB,SAAiB;AAC1D,QAAI,QAAQ,QAAQ,SAAS;AAC7B,UAAM,UAAU;AAAA,MACZ,MAAM;AAAA,MACN,QAAQ;AAAA,QAAC,QAAQ,MAAM,MAAM,GAAG,EAAE,IAAI;AAAA,QAClC,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,QAAQ;AAAA,MACZ;AAAA,MACA,QAAQ,CAAC;AAAA,IACb;AACA,QAAK,QAAQ,aAAa,KAAK,GAAI;AAC/B,YAAM,WAAW,KAAK,MAAM,KAAK;AACjC,cAAQ,OAAO;AACf,cAAQ,OAAK;AACb,cAAQ,WAAW,SAAS,OAAO,SAAS,QAAQ;AAAA,IACxD;AACA,QAAK,QAAQ,SAAS,KAAK,GAAG;AAC1B,cAAQ,OAAK;AACb,cAAQ,OAAO,WAAW,KAAK;AAAA,IACnC;AAGA,YAAQ,qBAAqB,SAAS,MAAM,MAAM,GAAG,EAAE,KAAK,GAAG,GAAG,SAAS,KAAK;AAAA,EACpF;AAAA,EAaA,qBAAqB,SAAS,IAAI,SAAS,OAAO;AAC9C,YAAQ,UAAU,IAAI,SAAU,KAAK,QAAQ;AACzC,UAAI,CAAC,OAAO,QAAQ;AAChB,YAAK,QAAQ,SAAS,OAAO,OAAO,MAAM;AACtC,kBAAQ,SAAS,IAAI,OAAO,IAAI;AAAA,QACpC,OAAM;AACF,kBAAQ,aAAa,IAAI,SAAS,MAAM;AAAC,oBAAQ,SAAS,IAAI,OAAO,IAAI;AAAA,UAAE,CAAC;AAAA,QAChF;AAAA,MACJ,OAAO;AACH,gBAAQ,mBAAmB,IAAI,SAAS,MAAM;AAAC,kBAAQ,SAAS,IAAI,OAAO,IAAI;AAAA,QAAE,CAAC;AAAA,MACtF;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAMQ,SAAS,UAA4B;AACzC,QAAI;AAOA,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AAEP,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IAC1E,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACvC;AAAA,EACJ;AAmBJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,WAAW,OAAO;AACnG,OAAO;AAEH,GAAC,MAAM,IAAI,WAAW,GAAG;AAC7B;",
  "names": []
}
